generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts     Account[]
  categories   Category[]
  transactions Transaction[]
  budgets      Budget[]

  RecurringTransaction RecurringTransaction[]

  Goal Goal[]
}

model Account {
  id        String   @id @default(uuid())
  name      String
  balance   Float
  type      AccountType @default(CHECKING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]

  @@unique([userId, name])
  RecurringTransaction RecurringTransaction[]
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]
  budgets      Budget[]

  @@unique([userId, name])
  RecurringTransaction RecurringTransaction[]
}

model Transaction {
  id          String          @id @default(uuid())
  description String
  amount      Float
  date        DateTime
  type        TransactionType
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Budget {
  id        String   @id @default(uuid())
  name      String
  amount    Float
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

// Adicione estes dois modelos ao final de prisma/schema.prisma

model Goal {
  id            String   @id @default(uuid())
  name          String
  targetAmount  Float
  currentAmount Float    @default(0)
  deadline      DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RecurringTransaction {
  id          String          @id @default(uuid())
  description String
  amount      Float
  type        TransactionType
  frequency   Frequency
  startDate   DateTime
  nextDueDate DateTime // Essencial para o agendador saber quando executar
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
}

enum TransactionType {
  INCOME
  EXPENSE
}